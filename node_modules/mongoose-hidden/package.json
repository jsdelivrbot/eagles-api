{
  "_args": [
    [
      {
        "raw": "mongoose-hidden@^1.2.0",
        "scope": null,
        "escapedName": "mongoose-hidden",
        "name": "mongoose-hidden",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/media/yonas/1A0A7B790A7B512D/project/eagles-api-test"
    ]
  ],
  "_from": "mongoose-hidden@>=1.2.0 <2.0.0",
  "_id": "mongoose-hidden@1.4.0",
  "_inCache": true,
  "_location": "/mongoose-hidden",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mongoose-hidden-1.4.0.tgz_1495086320818_0.4467226271517575"
  },
  "_npmUser": {
    "name": "mblarsen",
    "email": "mblarsen@gmail.com"
  },
  "_npmVersion": "4.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-hidden@^1.2.0",
    "scope": null,
    "escapedName": "mongoose-hidden",
    "name": "mongoose-hidden",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-hidden/-/mongoose-hidden-1.4.0.tgz",
  "_shasum": "bd43da3ccafe99d0896c8e628bf99dce8a622082",
  "_shrinkwrap": null,
  "_spec": "mongoose-hidden@^1.2.0",
  "_where": "/media/yonas/1A0A7B790A7B512D/project/eagles-api-test",
  "author": {
    "name": "Michael BÃ¸cker-Larsen",
    "email": "mblarsen@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/mblarsen/mongoose-hidden/issues"
  },
  "dependencies": {
    "debug": "^2.6"
  },
  "description": "Hides certain model properties when invoking toJSON or toObject.",
  "devDependencies": {
    "coveralls": "^2.11.6",
    "istanbul": "^0.4.2",
    "mocha": "^3.0.2",
    "mongoose": "^4.7.8",
    "should": "^11.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "bd43da3ccafe99d0896c8e628bf99dce8a622082",
    "tarball": "https://registry.npmjs.org/mongoose-hidden/-/mongoose-hidden-1.4.0.tgz"
  },
  "gitHead": "89befbb7ec7106dd530bb471a0d6667c7060fba1",
  "homepage": "https://github.com/mblarsen/mongoose-hidden#readme",
  "keywords": [
    "mongoose",
    "hidden",
    "hide",
    "property",
    "schema",
    "password",
    "id"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mblarsen",
      "email": "mblarsen@gmail.com"
    }
  ],
  "name": "mongoose-hidden",
  "optionalDependencies": {},
  "readme": "# mongoose-hidden\n\n[![build status](http://img.shields.io/travis/mblarsen/mongoose-hidden.svg)](http://travis-ci.org/mblarsen/mongoose-hidden) [![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/mblarsen/mongoose-hidden.svg)](http://isitmaintained.com/project/mblarsen/mongoose-hidden \"Average time to resolve an issue\") [![Coverage Status](https://coveralls.io/repos/github/mblarsen/mongoose-hidden/badge.svg?branch=master)](https://coveralls.io/github/mblarsen/mongoose-hidden?branch=master) [![NPM version](http://img.shields.io/npm/v/mongoose-hidden.svg)](https://www.npmjs.com/package/mongoose-hidden/) [![](https://img.shields.io/npm/dm/mongoose-hidden.svg)](https://www.npmjs.com/package/mongoose-hidden/)\n[![Get help on Codementor](https://cdn.codementor.io/badges/get_help_github.svg)](https://www.codementor.io/mblarsen) [![Join the chat at https://gitter.im/mblarsen/mongoose-hidden](https://badges.gitter.im/mblarsen/mongoose-hidden.svg)](https://gitter.im/mblarsen/mongoose-hidden?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Beerpay](https://beerpay.io/mblarsen/mongoose-hidden/badge.svg?style=beer)](https://beerpay.io/mblarsen/mongoose-hidden) [![Beerpay](https://beerpay.io/mblarsen/mongoose-hidden/make-wish.svg?style=flat)](https://beerpay.io/mblarsen/mongoose-hidden)  \n\nA Mongoose schema plugin that hooks into `toJSON()` and `toObject()` to allow hiding of properties you do not want sent client-side.\n\n# Install\n\n    npm install --save mongoose-hidden\n\n# Usage\n\nA simple example the hides passwords:\n\n    let mongoose = require('mongoose')\n    let Schema = mongoose.Schema\n    let mongooseHidden = require('mongoose-hidden')()\n\n    let UserSchema = new Schema(\n        name: String,\n        password: { type: String, hide: true },\n        email: String\n    )\n\n    UserSchema.plugin(mongooseHidden)\n\n    let User = mongoose.model('User', UserSchema)\n    let user = new User({\n        name: 'Joe',\n        email: 'joe@example.com',\n        password: 'secret'\n    })\n\n    user.save(function() {\n        console.log(user.toJSON()) // { name: 'Joe', email: 'joe@example.com' }\n    })\n\n### Property params: `hide`, `hideJSON`, `hideObject`\n\nA property will be hidden in all cases when `toJSON` and `toObject` is invoked if the property parameter `hide` is used. Alternatively use `hideJSON` or `hideObject` to target either of the serialization functions.\n\n    let UserSchema = new Schema(\n        ...\n        password: { type: String, hideJSON: true }, // hidden for toJSON but not for toObject\n        ...\n    )\n\nThe value of `hide`, `hideJSON`, and `hideObject` can be a callback with the following signature:\n\n    function (doc, ret) // same as the transform function callback\n\n### Option: `hidden`\n\n_since 0.7_\n\nIf you find yourself hiding the same properties over and over again you can initialize the plugin with the `hidden` option.\n\nThere are two methods: when creating the plugin and when attaching the plugin, and they can be combined.\n\n#### Method 1: constructor param\n\n    let mongooseHidden = require('mongoose-hidden')({ hidden: { _id: true, password: true } })\n    UserSchema.plugin(mongooseHidden)\n\n#### Method 2: attach plugin param\n\n    let mongooseHidden = require('mongoose-hidden')()\n    UserSchema.plugin(mongooseHidden, { hidden: { _id: true, password: true } })\n\n#### Method 1+2: combination\n\n    let mongooseHidden = require('mongoose-hidden')({ hidden: { _id: true, password: true } })\n    UserSchema.plugin(mongooseHidden, { hidden: { resetToken: true } })\n    PaymentSchema.plugin(mongooseHidden, { hidden: { _id: false, authToken: true } }) // unhides _id\n\n.. another example:\n\n    if (app === 'web') {\n        UserSchema.plugin(mongooseHidden, { hidden: { _id: true, password: true } })\n    } else if (app == 'private-api') {\n        UserSchema.plugin(mongooseHidden, { hidden: { password: true } })\n    } else {\n        UserSchema.plugin(mongooseHidden)\n    }\n\n### Option: `defaultHidden`\n\nBy default `_id` and `__v` properties are hidden. You can override this behaviour, when you load the plugin:\n\n    let mongooseHidden = require('mongoose-hidden')({ defaultHidden: { password: true } })\n    UserSchema.plugin(mongooseHidden)\n\nThis effectively overrides the plugin defaults leaving only `password` hidden and `_id` and `__v` are left untouched.\n\nAlternatively if you only want to unhide the params hidden by the plugin by default you can pass the plugin option `autoHideJSON` and `autoHideObject` with a value of `false`.\n\n### Option: `virtuals`\n\n_since 0.3.1_\n\nHiding of virtuals can be done as well. Be sure to include the plugin after you turn on virtuals.\n\n    // By default in Mongoose virtuals will not be included. Turn on before enabling plugin.\n    schema.set('toJSON', { virtuals: true });\n    schema.set('toObject', { virtuals: true });\n\n    // Enable plugin\n    schema.plugin(mongooseHidden, { virtuals: { fullname: 'hideJSON' }});\n\nThe value of the virtuals key can be: `hide`, `hideJSON` and `hideObject`.\n\nIf have nested virtuals use the path for the key above, e.g. `'nested.virtual': 'hideJSON'`.\n\n_Note: If you don't turn on virtuals for `toObject`, `fullname` in the above example `fullname` will *NOT* be hidden despite its `hideJSON` value._\n\n### Transform\n\n_since 0.6_\n\nThe `mongoose-hidden` is written as a transform function. If you implement your own transform functions be sure to add them to prior to applying the plugin. The plugin will then invoke that function before hiding properties.\n\n    let mongooseHidden = require('mongoose-hidden')()\n\n    // First define transform function\n    UserSchema.set('toJSON', { transform: function (doc, ret, opt) {\n        ret['name'] = 'Mr ' + ret['name']\n        return ret\n    }})\n\n    // Then apply plugin\n    UserSchema.plugin(mongooseHidden)\n\nAll names will now be prefixed with \"Mr\".\n\n# Changelog\n\nSee [CHANGELOG.md](https://github.com/mblarsen/mongoose-hidden/blob/master/CHANGELOG.md)\n\n# Limitations\n\n* Always set `{ getters: true, virtuals: true }` before installing plugin if you want virtuals to be returned:\n\n    schema.set('toJSON', { getters: true, virtuals: true });\n    schema.plugin(require(mongooseHidden));\n\n* Recursive use of hide not supported, but nested documents/objects are supported.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mblarsen/mongoose-hidden.git"
  },
  "scripts": {
    "mocha": "./node_modules/mocha/bin/_mocha",
    "test": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js -v && rm -rf ./coverage"
  },
  "version": "1.4.0"
}
